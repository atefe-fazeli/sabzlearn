{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useReducer } from \"react\";\n\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case \"INPUT_CHANGE\":\n      {\n        let isFormValid = true;\n\n        for (const inputID in state.inputs) {\n          if (inputID === action.inputID) {\n            isFormValid = isFormValid && action.isValid;\n          } else {\n            isFormValid = isFormValid && state.inputs[inputID].isValid;\n          }\n        }\n\n        return { ...state,\n          inputs: { ...state.inputs,\n            [action.inputID]: {\n              value: action.value,\n              isValid: action.isValid\n            }\n          },\n          isFormValid: isFormValid\n        };\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};\n\nexport const useForm = (initInputs, initFormIsValid) => {\n  _s();\n\n  const [formState, dispatch] = useReducer(formReducer, {\n    inputs: initInputs,\n    isFormValid: initFormIsValid\n  });\n\n  const onInputHandler = (id, value, isValid) => {\n    dispatch({\n      type: \"INPUT_CHANGE\",\n      value,\n      isValid,\n      inputID: id\n    });\n  };\n\n  return [formState, onInputHandler];\n};\n\n_s(useForm, \"PZ9PiWXJbnlmuTDkA+UIu93GBxA=\");","map":{"version":3,"names":["useReducer","formReducer","state","action","type","isFormValid","inputID","inputs","isValid","value","useForm","initInputs","initFormIsValid","formState","dispatch","onInputHandler","id"],"sources":["D:/programming/projects/sabzlearn/frontend/src/hooks/useForm.js"],"sourcesContent":["import { useReducer } from \"react\";\n\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case \"INPUT_CHANGE\": {\n        let isFormValid = true\n        for(const inputID in state.inputs) {\n            if (inputID === action.inputID) {\n                isFormValid = isFormValid && action.isValid\n            } else {\n                isFormValid = isFormValid && state.inputs[inputID].isValid\n            }\n        }\n        return {\n            ...state, \n            inputs: {\n                ...state.inputs,\n                [action.inputID]: {\n                    value: action.value,\n                    isValid: action.isValid\n                }\n            },\n            isFormValid: isFormValid\n        }\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nexport const useForm = (initInputs, initFormIsValid) => {\n  const [formState, dispatch] = useReducer(formReducer, {\n    inputs: initInputs,\n    isFormValid: initFormIsValid,\n  });\n\n  const onInputHandler = (id, value, isValid) => {\n    dispatch({\n      type: \"INPUT_CHANGE\",\n      value,\n      isValid,\n      inputID: id,\n    });\n  };\n\n  return [formState, onInputHandler];\n};\n"],"mappings":";;AAAA,SAASA,UAAT,QAA2B,OAA3B;;AAEA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;EACrC,QAAQA,MAAM,CAACC,IAAf;IACE,KAAK,cAAL;MAAqB;QACjB,IAAIC,WAAW,GAAG,IAAlB;;QACA,KAAI,MAAMC,OAAV,IAAqBJ,KAAK,CAACK,MAA3B,EAAmC;UAC/B,IAAID,OAAO,KAAKH,MAAM,CAACG,OAAvB,EAAgC;YAC5BD,WAAW,GAAGA,WAAW,IAAIF,MAAM,CAACK,OAApC;UACH,CAFD,MAEO;YACHH,WAAW,GAAGA,WAAW,IAAIH,KAAK,CAACK,MAAN,CAAaD,OAAb,EAAsBE,OAAnD;UACH;QACJ;;QACD,OAAO,EACH,GAAGN,KADA;UAEHK,MAAM,EAAE,EACJ,GAAGL,KAAK,CAACK,MADL;YAEJ,CAACJ,MAAM,CAACG,OAAR,GAAkB;cACdG,KAAK,EAAEN,MAAM,CAACM,KADA;cAEdD,OAAO,EAAEL,MAAM,CAACK;YAFF;UAFd,CAFL;UASHH,WAAW,EAAEA;QATV,CAAP;MAWH;;IACD;MAAS;QACP,OAAOH,KAAP;MACD;EAxBH;AA0BD,CA3BD;;AA6BA,OAAO,MAAMQ,OAAO,GAAG,CAACC,UAAD,EAAaC,eAAb,KAAiC;EAAA;;EACtD,MAAM,CAACC,SAAD,EAAYC,QAAZ,IAAwBd,UAAU,CAACC,WAAD,EAAc;IACpDM,MAAM,EAAEI,UAD4C;IAEpDN,WAAW,EAAEO;EAFuC,CAAd,CAAxC;;EAKA,MAAMG,cAAc,GAAG,CAACC,EAAD,EAAKP,KAAL,EAAYD,OAAZ,KAAwB;IAC7CM,QAAQ,CAAC;MACPV,IAAI,EAAE,cADC;MAEPK,KAFO;MAGPD,OAHO;MAIPF,OAAO,EAAEU;IAJF,CAAD,CAAR;EAMD,CAPD;;EASA,OAAO,CAACH,SAAD,EAAYE,cAAZ,CAAP;AACD,CAhBM;;GAAML,O"},"metadata":{},"sourceType":"module"}