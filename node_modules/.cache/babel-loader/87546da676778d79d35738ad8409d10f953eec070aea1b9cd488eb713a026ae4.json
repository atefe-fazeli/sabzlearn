{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useReducer } from \"react\";\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case \"INPUT_CHANGE\":\n      {\n        let isFormValid = true;\n        for (const inputID in state.inputs) {\n          if (inputID === action.inputID) {\n            isFormValid = isFormValid && action.isValid;\n          } else {\n            isFormValid = isFormValid && state.inputs[inputID].isValid;\n          }\n        }\n        return {\n          ...state,\n          inputs: {\n            ...state.inputs,\n            [action.inputID]: {\n              value: action.value,\n              isValid: action.isValid\n            }\n          },\n          isFormValid: isFormValid\n        };\n      }\n    default:\n      {\n        return state;\n      }\n  }\n};\nexport const useForm = (initInputs, initFormIsValid) => {\n  _s();\n  const [formState, dispatch] = useReducer(formReducer, {\n    inputs: initInputs,\n    isFormValid: initFormIsValid\n  });\n  const onInputHandler = (id, value, isValid) => {\n    dispatch({\n      type: \"INPUT_CHANGE\",\n      value,\n      isValid,\n      inputID: id\n    });\n  };\n  return [formState, onInputHandler];\n};\n_s(useForm, \"PZ9PiWXJbnlmuTDkA+UIu93GBxA=\");","map":{"version":3,"names":["useReducer","formReducer","state","action","type","isFormValid","inputID","inputs","isValid","value","useForm","initInputs","initFormIsValid","_s","formState","dispatch","onInputHandler","id"],"sources":["D:/programming/projects/sabzlearn/src/hooks/useForm.js"],"sourcesContent":["import { useReducer } from \"react\";\n\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case \"INPUT_CHANGE\": {\n        let isFormValid = true\n        for(const inputID in state.inputs) {\n            if (inputID === action.inputID) {\n                isFormValid = isFormValid && action.isValid\n            } else {\n                isFormValid = isFormValid && state.inputs[inputID].isValid\n            }\n        }\n        return {\n            ...state, \n            inputs: {\n                ...state.inputs,\n                [action.inputID]: {\n                    value: action.value,\n                    isValid: action.isValid\n                }\n            },\n            isFormValid: isFormValid\n        }\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nexport const useForm = (initInputs, initFormIsValid) => {\n  const [formState, dispatch] = useReducer(formReducer, {\n    inputs: initInputs,\n    isFormValid: initFormIsValid,\n  });\n\n  const onInputHandler = (id, value, isValid) => {\n    dispatch({\n      type: \"INPUT_CHANGE\",\n      value,\n      isValid,\n      inputID: id,\n    });\n  };\n\n  return [formState, onInputHandler];\n};\n"],"mappings":";AAAA,SAASA,UAAU,QAAQ,OAAO;AAElC,MAAMC,WAAW,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACrC,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,cAAc;MAAE;QACjB,IAAIC,WAAW,GAAG,IAAI;QACtB,KAAI,MAAMC,OAAO,IAAIJ,KAAK,CAACK,MAAM,EAAE;UAC/B,IAAID,OAAO,KAAKH,MAAM,CAACG,OAAO,EAAE;YAC5BD,WAAW,GAAGA,WAAW,IAAIF,MAAM,CAACK,OAAO;UAC/C,CAAC,MAAM;YACHH,WAAW,GAAGA,WAAW,IAAIH,KAAK,CAACK,MAAM,CAACD,OAAO,CAAC,CAACE,OAAO;UAC9D;QACJ;QACA,OAAO;UACH,GAAGN,KAAK;UACRK,MAAM,EAAE;YACJ,GAAGL,KAAK,CAACK,MAAM;YACf,CAACJ,MAAM,CAACG,OAAO,GAAG;cACdG,KAAK,EAAEN,MAAM,CAACM,KAAK;cACnBD,OAAO,EAAEL,MAAM,CAACK;YACpB;UACJ,CAAC;UACDH,WAAW,EAAEA;QACjB,CAAC;MACL;IACA;MAAS;QACP,OAAOH,KAAK;MACd;EACF;AACF,CAAC;AAED,OAAO,MAAMQ,OAAO,GAAGA,CAACC,UAAU,EAAEC,eAAe,KAAK;EAAAC,EAAA;EACtD,MAAM,CAACC,SAAS,EAAEC,QAAQ,CAAC,GAAGf,UAAU,CAACC,WAAW,EAAE;IACpDM,MAAM,EAAEI,UAAU;IAClBN,WAAW,EAAEO;EACf,CAAC,CAAC;EAEF,MAAMI,cAAc,GAAGA,CAACC,EAAE,EAAER,KAAK,EAAED,OAAO,KAAK;IAC7CO,QAAQ,CAAC;MACPX,IAAI,EAAE,cAAc;MACpBK,KAAK;MACLD,OAAO;MACPF,OAAO,EAAEW;IACX,CAAC,CAAC;EACJ,CAAC;EAED,OAAO,CAACH,SAAS,EAAEE,cAAc,CAAC;AACpC,CAAC;AAACH,EAAA,CAhBWH,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}